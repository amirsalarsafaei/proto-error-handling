package main

import (
	"log/slog"
	"net"
	"os"
	"os/signal"
	"syscall"

	helloworldPb "github.com/amirsalarsafaei/proto-error-handling/autogenerated/go/helloworld"
	"google.golang.org/grpc"

	"github.com/amirsalarsafaei/proto-error-handling/go/internal/helloworld"
)

func main() {
	logger := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
		Level: slog.LevelWarn,
	}))
	slog.SetDefault(logger)

	userRepo := helloworld.NewInMemoryUserRepository()
	userService := helloworld.NewUserService(userRepo)

	server := grpc.NewServer()
	helloworldPb.RegisterUserServiceServer(server, userService)

	sigChan := make(chan os.Signal, 1)
	errChan := make(chan error, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	lis, err := net.ListenTCP("tcp", &net.TCPAddr{IP: net.IPv4(127, 0, 0, 1), Port: 8000})
	if err != nil {
		slog.Error("could not listen", slog.Any("error", err))
		return
	}

	go func() {
		err := server.Serve(lis)
		if err != nil {
			slog.Error("could not serve grpc", slog.Any("error", err))
			errChan <- err
		}
	}()

	select {
	case <-sigChan:
		server.GracefulStop()
		slog.Info("gracefully shutdown server")
	case <-errChan:
		slog.Error("server shutdown unexpectedly")
	}

}
